buildscript {
	ext {
		kotlinVer = '1.2.0'
		springBootVer = '2.0.0.M7'
		kotlinLoggingVer = '1.4.7'

		propdepsPluginVer = '0.0.10.RELEASE'
		versionPluginVer = '0.17.0'
		dockerPluginVer = '0.13.0'

		junitJupiterVer = '5.0.2'
		junitPlatformVer = '1.0.2'
		testContainersVer = '1.4.3'
	}

	repositories {
		jcenter()
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'http://repo.spring.io/plugins-release' }
		maven { url 'https://repo.spring.io/libs-milestone' }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVer"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVer"
		classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVer"
		classpath "io.spring.gradle:propdeps-plugin:$propdepsPluginVer"
		// gradle dependencyUpdates -Drevision=release
		classpath "com.github.ben-manes:gradle-versions-plugin:$versionPluginVer"
		classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:$dockerPluginVer"
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'propdeps'
apply plugin: 'propdeps-idea'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.palantir.docker'

repositories {
	jcenter()
	maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
	compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVer"

	compile "io.github.microutils:kotlin-logging:$kotlinLoggingVer"

	compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	compile 'org.springframework.boot:spring-boot-starter-webflux'
	compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'junit', module: 'junit'
	}

	testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVer"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVer"
	testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVer"

	testCompile "org.testcontainers:testcontainers:$testContainersVer"
}

group = 'app'
version = '0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9

tasks.withType(JavaCompile) {
	options.fork = true
	options.incremental = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		apiVersion = "1.2"
		languageVersion = "1.2"
		jvmTarget = "1.8"
	}
}

bootJar {
	mustRunAfter clean
	mainClassName = 'app.AppKt'
}

junitPlatform {
	enableStandardTestTask true
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.4'
	distributionType = Wrapper.DistributionType.ALL
}

// https://github.com/palantir/gradle-docker
// gradle docker
docker {
	dependsOn bootJar
	name 'app'
	tags 'latest'
	files bootJar.outputs
	dockerfile file('src/main/docker/Dockerfile')
	buildArgs([
		JAVA_OPTS: '-XX:-TieredCompilation -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1',
		PORT     : '8081'
	])
	pull true
}

task stage(dependsOn: ['build', 'clean'])
