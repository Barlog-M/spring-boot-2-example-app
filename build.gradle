buildscript {
    ext {
        kotlinVer = '1.2.61'
        springBootVer = '2.0.4.RELEASE'
        kotlinLoggingVer = '1.5.9'
        reactorCoreVer = '3.1.8.RELEASE'
        javaxAnnotationApiVer = '1.3.2'
        javaxTransactionApiVer = '1.3'

        testContainersVer = '1.8.3'
        jfairyVer = '0.5.9'

        propdepsPluginVer = '0.0.10.RELEASE'
        versionPluginVer = '0.20.0'
        dockerPluginVer = '0.20.1'
    }

    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVer"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVer"
        classpath "io.spring.gradle:propdeps-plugin:$propdepsPluginVer"
        // gradle dependencyUpdates -Drevision=release
        classpath "com.github.ben-manes:gradle-versions-plugin:$versionPluginVer"
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:$dockerPluginVer"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'propdeps'
apply plugin: 'propdeps-idea'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.palantir.docker'

repositories {
    jcenter()
    maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVer"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVer"

    compile "io.github.microutils:kotlin-logging:$kotlinLoggingVer"

    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // compile "javax.annotation:javax.annotation-api:$javaxAnnotationApiVer"
    // compile "javax.transaction:javax.transaction-api:$javaxTransactionApiVer"

    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    testCompile "org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVer"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    testCompile "io.projectreactor:reactor-test:$reactorCoreVer"

    testCompile "org.testcontainers:testcontainers:$testContainersVer"
    testCompile "io.codearte.jfairy:jfairy:$jfairyVer"
}

group = 'app'
version = '0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        apiVersion = "1.2"
        languageVersion = "1.2"
        jvmTarget = "1.8"
    }
}

bootJar {
    mainClassName = 'app.AppKt'
    baseName = 'app'
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

wrapper {
    gradleVersion = '4.9'
    distributionType = Wrapper.DistributionType.ALL
}

// https://github.com/palantir/gradle-docker
// gradle docker
docker {
    dependsOn build
    name "${project.group}/${bootJar.baseName}"
    tags 'latest'
    files bootJar.archivePath
    dockerfile file("${projectDir}/src/main/docker/Dockerfile")
    buildArgs([
        JAR_FILE : "${bootJar.archiveName}",
        JAVA_OPTS: '-XX:-TieredCompilation',
        PORT     : '8080'
    ])
    pull true
}

task stage(dependsOn: ['build', 'clean'])
